package appselenium;
/*
 * @author winston.alonso
 */

import dynamic.web.content.contectDB;
import java.io.File;
import java.net.URL;
import java.awt.Font;
import java.util.List;
import java.awt.Image;
import org.jdom.Element;
import javax.swing.JList;
import org.jdom.Document;
import javax.swing.JTree;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JButton;
import java.io.IOException;
import java.util.ArrayList;
import java.text.Normalizer;
import java.awt.BorderLayout;
import javax.swing.ImageIcon;
import java.sql.SQLException;
import javax.imageio.ImageIO;
import org.openqa.selenium.By;
import org.jdom.JDOMException;
import javax.swing.JScrollPane;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import org.xml.sax.SAXException;
import java.util.logging.Logger;
import org.jdom.input.SAXBuilder;
import java.awt.event.MouseEvent;
import java.awt.event.MouseAdapter;
import javax.swing.DefaultListModel;
import org.openqa.selenium.WebElement;
import java.net.MalformedURLException;
import javax.swing.tree.TreeSelectionModel;
import javax.swing.event.TreeSelectionEvent;
import org.openqa.selenium.JavascriptExecutor;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import org.openqa.selenium.firefox.FirefoxBinary;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxProfile;
import javax.xml.parsers.ParserConfigurationException;

public class Extract extends javax.swing.JFrame {
    /**
     * Creates new form Extract
     */
    public Extract() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Jsearch = new javax.swing.JFrame();
        textsearch = new javax.swing.JLabel();
        search = new javax.swing.JButton();
        xpath = new java.awt.TextField();
        backsearch = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        searchlist = new javax.swing.JEditorPane();
        title = new javax.swing.JLabel();
        url = new java.awt.TextField();
        links = new javax.swing.JCheckBox();
        images = new javax.swing.JCheckBox();
        text = new javax.swing.JCheckBox();
        go = new javax.swing.JButton();
        jtexturl = new javax.swing.JLabel();
        pdf = new javax.swing.JCheckBox();
        docs = new javax.swing.JCheckBox();
        jadvanced = new javax.swing.JLabel();
        jadvancedsearch = new javax.swing.JComboBox<>();

        textsearch.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        textsearch.setText("SEARCH TEXT");

        search.setText("SEARCH");
        search.setEnabled(false);

        xpath.setEnabled(false);

        backsearch.setText("BACK");
        backsearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backsearchMouseClicked(evt);
            }
        });

        jScrollPane3.setViewportView(searchlist);

        javax.swing.GroupLayout JsearchLayout = new javax.swing.GroupLayout(Jsearch.getContentPane());
        Jsearch.getContentPane().setLayout(JsearchLayout);
        JsearchLayout.setHorizontalGroup(
            JsearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JsearchLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(JsearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(JsearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(backsearch)
                        .addGroup(JsearchLayout.createSequentialGroup()
                            .addComponent(xpath, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(43, 43, 43)
                            .addComponent(search))))
                .addContainerGap(60, Short.MAX_VALUE))
            .addGroup(JsearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(JsearchLayout.createSequentialGroup()
                    .addGap(53, 53, 53)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 529, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(58, Short.MAX_VALUE)))
        );
        JsearchLayout.setVerticalGroup(
            JsearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JsearchLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(textsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(JsearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(xpath, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 419, Short.MAX_VALUE)
                .addComponent(backsearch)
                .addGap(29, 29, 29))
            .addGroup(JsearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(JsearchLayout.createSequentialGroup()
                    .addGap(148, 148, 148)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(127, Short.MAX_VALUE)))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("EXTRACT");
        setPreferredSize(new java.awt.Dimension(640, 450));

        title.setBackground(new java.awt.Color(51, 204, 255));
        title.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("EXTRACT");

        links.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        links.setText("LINKS");

        images.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        images.setText("IMAGES");

        text.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        text.setText("TEXT");

        go.setText("GO!");
        go.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                goMouseClicked(evt);
            }
        });

        jtexturl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jtexturl.setText("URL:");

        pdf.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        pdf.setText("PDF");

        docs.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        docs.setText("DOCUMENTS");

        jadvanced.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jadvanced.setText("ADVANCED SEARCH:");

        jadvancedsearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "DATA BASE" }));
        jadvancedsearch.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jadvancedsearchItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(title, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jtexturl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(url, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(220, 220, 220)
                                .addComponent(go))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pdf)
                                    .addComponent(links))
                                .addGap(111, 111, 111)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(text)
                                    .addComponent(docs))
                                .addGap(89, 89, 89)
                                .addComponent(images))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(94, 94, 94)
                                .addComponent(jadvanced)
                                .addGap(27, 27, 27)
                                .addComponent(jadvancedsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(34, 34, 34)))
                .addContainerGap(103, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(url, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jtexturl))
                .addGap(41, 41, 41)
                .addComponent(go)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(text))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(images)
                        .addComponent(links)))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pdf)
                    .addComponent(docs))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jadvanced)
                    .addComponent(jadvancedsearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public contectDB conecdb = new contectDB();
    public String nam = " ", titl = " ", nampage = " ", taname = " ", serh = " ";
    public long tiempoInicio, totalTiempo;
    public static String brows, list, titlesec;
    public FirefoxDriver driver;
    public List<WebElement> dop = null;
    public static int ven = 0;
    
    private void goMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_goMouseClicked
        String urls = url.getText();
        String s= "abcdefghijklabcdefghijklabcdefghijklabcdefghijklabcdefghijklabcd";
        boolean chlinks = links.isSelected(),
                chimages = images.isSelected(),
                chtexts = text.isSelected(),
                chpdf = pdf.isSelected(),
                chdocs = docs.isSelected();
        try {
            if(urls.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please enter an URL");
            } else {
                tiempoInicio = System.currentTimeMillis();
                SAXBuilder builder = new SAXBuilder();
                File xmlFile = new File("./src/access/LoginInfo.xml");
                Document document = (Document) builder.build(xmlFile);
                Element rootNode = document.getRootElement();
                
                if(chlinks == true || chtexts == true || chimages == true || chpdf == true || chdocs == true) {
                    Element newurl = rootNode.getChild("url");
                    newurl.setText(urls);
                    list = rootNode.getChildText("url");
                    File pathToBinary = new File("C:\\Users\\winston.alonso\\AppData\\Local\\Mozilla Firefox\\firefox.exe");
                    FirefoxBinary ffBinary = new FirefoxBinary(pathToBinary);
                    FirefoxProfile firefoxProfile = new FirefoxProfile();
                    driver = new FirefoxDriver(ffBinary,firefoxProfile);
                    driver.manage().window().maximize();
                    driver.get(list);
                    
                    nam = ((JavascriptExecutor)driver).executeScript("return window.location.href").toString();
                    nam = nam.replaceAll("https|http|\\.|\\/|\\:|-|#|\\?|=|&", "");
                    if(nam.length() > 64) {
                        nam = nam.substring(0, Math.min(s.length(), 64));
                        conecdb.dbname(nam);
                    } else {
                        conecdb.dbname(nam);
                    }

                    if(rootNode.getChildText("login").isEmpty()) {
                        JOptionPane.showMessageDialog(null, "Please SIGN IN");
                    } else {
                        if(chtexts == true) {
                            taname = "texts";
                            conecdb.datetable(taname, nam);
                            extract(rootNode, taname);
                        }

                        if(chimages == true) {
                            taname = "images";
                            conecdb.datetable(taname, nam);
                            extract(rootNode, taname);
                        }

                        if(chlinks == true) {
                            taname = "links";
                            conecdb.datetable(taname, nam);
                            extract(rootNode, taname);
                        }
                        
                        if(chpdf == true) {
                            taname = "pdfs";
                            conecdb.datetable(taname, nam);
                            extract(rootNode, taname);
                        }
                        
                        if(chdocs == true) {
                            taname = "docs";
                            conecdb.datetable(taname, nam);
                            extract(rootNode, taname);
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please select any option");
                }
            }
        } catch(Exception e) {
            System.out.println(e.getMessage());
        }
        driver.quit();
    }//GEN-LAST:event_goMouseClicked

    private void backsearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backsearchMouseClicked
        Jsearch.setVisible(false);
        setVisible(true);
    }//GEN-LAST:event_backsearchMouseClicked

    private void jadvancedsearchItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jadvancedsearchItemStateChanged
        String tsearch = (String)jadvancedsearch.getSelectedItem();
        tsearch = tsearch.toLowerCase();
        selectview(tsearch);
    }//GEN-LAST:event_jadvancedsearchItemStateChanged

    private int funfir = 0;
    
    public void selectview(String view) {
        JFrame windoview = new JFrame();
        windoview.setSize(700, 690);
        windoview.setLayout(null);
        JLabel title = new JLabel();
        if(ven == 1) {
            if(!view.equals("")) {
                title.setText("" + view.toUpperCase() + "");
                title.setFont(new Font("Tahoma", Font.PLAIN, 24));
                title.setBounds(35, 20, 150, 30);
                windoview.add(title);
                windoview.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                ven = 0;
                if(view.equals("data base")) {
                    setVisible(false);
                    JTree tree = new JTree();
                    ArrayList<String> text = null;
                    DefaultMutableTreeNode root = new DefaultMutableTreeNode("Root");
                    try {
                        text = conecdb.showdb(view, nam);
                        for(String textlist : text) {
                            if(!textlist.equals("information_schema")) {
                                if(!textlist.equals("performance_schema")) {
                                    if(!textlist.equals("test")) {
                                        DefaultMutableTreeNode node = new DefaultMutableTreeNode(textlist);
                                        ArrayList<String> subtext = null;
                                        subtext = conecdb.showtable(textlist);
                                        for(String tabsub : subtext) {
                                            node.add(new DefaultMutableTreeNode(tabsub));
                                        }
                                        root.add(node);
                                        tree = new JTree(root);
                                    }
                                }
                            }
                        }
                        tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
                        tree.setRootVisible(false);
                        tree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener() {
                            @Override
                            public void valueChanged(TreeSelectionEvent e) {
                                String viewdbcon = null;
                                funfir++;
                                viewdbcon = e.getPath().toString();
                                String [] treesubtab = viewdbcon.split(", ");
                                if(treesubtab.length == 3) {
                                    String renam = treesubtab[2].replaceAll("]","");
                                    nam = treesubtab[1];
                                    if(funfir == 1) {
                                        selectview(renam);
                                        setVisible(false);
                                        windoview.setVisible(false);
                                        selectview(renam);
                                    } else {
                                        setVisible(false);
                                        windoview.setVisible(false);
                                        selectview(renam);
                                    }
                                }
                            }
                        });
                        JScrollPane scrollview = new JScrollPane(tree);
                        scrollview.setBounds(35, 60, 600, 500);
                        JButton bback = new JButton();
                        bback.setText("BACK");
                        bback.setFont(new Font("Tahoma", Font.PLAIN, 20));
                        bback.setBounds(485, 590, 150, 30);
                        bback.addMouseListener(new MouseAdapter(){
                            @Override
                            public void mouseClicked(MouseEvent evt) {
                                windoview.setVisible(false);
                                jadvancedsearch.setSelectedIndex(0);
                                setVisible(true);
                            }
                        });
                        windoview.add(bback);
                        windoview.add(scrollview);
                        windoview.setVisible(true);
                    } catch (SQLException ex) {
                        Logger.getLogger(Extract.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(Extract.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else if(!view.equals("images")) {
                    setVisible(false);
                    ArrayList<String> text = null;
                    JList info = new JList();
                    try {
                        text = conecdb.showimages(view, nam);
                        DefaultListModel model = new DefaultListModel();
                        for(String textlist : text) {
                            model.addElement(textlist);
                        }
                        info.setModel(model);
                        JScrollPane scrollview = new JScrollPane(info);
                        scrollview.setBounds(35, 60, 600, 500);
                        JButton bback = new JButton();
                        bback.setText("BACK");
                        bback.setFont(new Font("Tahoma", Font.PLAIN, 20));
                        bback.setBounds(485, 590, 150, 30);
                        bback.addMouseListener(new MouseAdapter(){
                            @Override
                            public void mouseClicked(MouseEvent evt) {
                                windoview.setVisible(false);
                                jadvancedsearch.setSelectedIndex(0);
                                setVisible(true);
                            }
                        });
                        windoview.add(bback);
                        windoview.add(scrollview, BorderLayout.WEST);
                        windoview.setVisible(true);
                    } catch (SQLException ex) {
                        Logger.getLogger(Extract.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(Extract.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    setVisible(false);
                    ArrayList<String> text = null;
                    JList info = new JList();
                    try {
                        text = conecdb.showimages(view, nam);
                        DefaultListModel model = new DefaultListModel();
                        for(String textlist : text) {
                            model.addElement(textlist);
                        }
                        info.setModel(model);
                        JScrollPane scrollview = new JScrollPane(info);
                        scrollview.setBounds(35, 60, 600, 500);
                        JButton bback = new JButton();
                        bback.setText("BACK");
                        bback.setFont(new Font("Tahoma", Font.PLAIN, 20));
                        bback.setBounds(485, 590, 150, 30);
                        bback.addMouseListener(new MouseAdapter(){
                            @Override
                            public void mouseClicked(MouseEvent evt) {
                                windoview.setVisible(false);
                                jadvancedsearch.setSelectedIndex(0);
                                setVisible(true);
                            }
                        });
                        windoview.add(bback);
                        windoview.add(scrollview);
                        info.addMouseListener(new MouseAdapter(){
                            @Override
                            public void mouseClicked(MouseEvent evt) {
                                String seeimages;
                                seeimages = (String)info.getSelectedValue();
                                Image ima = null;
                                try {
                                    URL url = new URL(seeimages);
                                    ima = ImageIO.read(url);
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }
                                JFrame windimg = new JFrame();
                                windimg.setSize(ima.getWidth(null) + 100, ima.getHeight(null) + 100);
                                JLabel vimg = new JLabel(new ImageIcon(ima));
                                windimg.add(vimg);
                                windimg.setVisible(true);
                                
                                /* FOR THE SEARCH
                                JCheckBox secti = new JCheckBox("Pregnant Parking");
                                secti.setBounds(35, 80, 150, 50);
                                secti.addMouseListener(new MouseAdapter(){
                                    @Override
                                public void mouseClicked(MouseEvent evt) {
                                            if(secti.isSelected()) {
                                                    TextField cant = new TextField ();
                                                    cant.setBounds(225, 95, 50, 20);
                                                    windoview.add(cant);
                                                } 
                                    }
                                });*/
                                
                            }
                        });                        
                        windoview.setVisible(true);
                    } catch (SQLException ex) {
                        Logger.getLogger(Extract.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(Extract.class.getName()).log(Level.SEVERE, null, ex);
                    }               
                }
            }
        } else {
            ven = 1;
        }
    }
    
    public void extract(Element elexml, String namtab) throws SQLException, ClassNotFoundException, IOException, MalformedURLException, JDOMException, ParserConfigurationException, SAXException {
        dop = null;
        
        if("texts".equals(namtab)) {
            text.doClick();
            text.setEnabled(false);
            titl = "texts";
            dop = driver.findElements(By.xpath(elexml.getChildText("" + namtab + "")));
            conecdb.subtable(dop, namtab, nam);
            jadvancedsearch.addItem("TEXTS");
        }
        
        if("images".equals(namtab)) {
            images.doClick();
            images.setEnabled(false);
            titl = "images";
            dop = driver.findElements(By.xpath(elexml.getChildText("" + namtab + "")));
            conecdb.subtable(dop, namtab, nam);
            jadvancedsearch.addItem("IMAGES");
        }
        
        if("links".equals(namtab)) {
            links.doClick();
            links.setEnabled(false);
            titl = "links";
            dop = driver.findElements(By.xpath(elexml.getChildText("" + namtab + "")));
            conecdb.subtable(dop, namtab, nam);
            jadvancedsearch.addItem("LINKS");
        }
        
        if("pdfs".equals(namtab)) {
            pdf.doClick();
            pdf.setEnabled(false);
            titl = "links";
            dop = driver.findElements(By.xpath(elexml.getChildText("" + titl + "")));
            conecdb.subtable(dop, namtab, nam);
            jadvancedsearch.addItem("PDFS");
        }
        
        if("docs".equals(namtab)) {
            docs.doClick();
            docs.setEnabled(false);
            titl = "links";
            dop = driver.findElements(By.xpath(elexml.getChildText("" + titl + "")));
            conecdb.subtable(dop, namtab, nam);
            jadvancedsearch.addItem("DOCS");
        }
    }
    
    public static String delaccents(String nam) {
        nam = Normalizer.normalize(nam, Normalizer.Form.NFD);
        nam = nam.replaceAll("[^\\p{ASCII}]", "");
        nam = nam.replaceAll("\\p{M}", "");
        return nam;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Extract.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Extract.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Extract.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Extract.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Extract().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame Jsearch;
    private javax.swing.JButton backsearch;
    private javax.swing.JCheckBox docs;
    private javax.swing.JButton go;
    private javax.swing.JCheckBox images;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel jadvanced;
    private javax.swing.JComboBox<String> jadvancedsearch;
    private javax.swing.JLabel jtexturl;
    private javax.swing.JCheckBox links;
    private javax.swing.JCheckBox pdf;
    private javax.swing.JButton search;
    private javax.swing.JEditorPane searchlist;
    private javax.swing.JCheckBox text;
    private javax.swing.JLabel textsearch;
    private javax.swing.JLabel title;
    private java.awt.TextField url;
    private java.awt.TextField xpath;
    // End of variables declaration//GEN-END:variables
}